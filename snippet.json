{
    "snp UnionFind": {
        "prefix": "UnionFind",
        "body": [
            "struct UnionFind",
            "{",
            "  vector<int> par;",
            "",
            "  UnionFind(int N) : par(N)",
            "  {",
            "    for (int i = 0; i < N; i++)",
            "      par[i] = -1;",
            "  }",
            "",
            "  int root(int x)",
            "  {",
            "    if (par[x] < 0)",
            "      return x;",
            "    return par[x] = root(par[x]);",
            "  }",
            "",
            "  void unite(int x, int y)",
            "  {",
            "    int rx = root(x);",
            "    int ry = root(y);",
            "    if (same(x, y))",
            "    {",
            "      return;",
            "    }",
            "    if (par[rx] > par[ry])",
            "      swap(rx, ry);",
            "    par[rx] += par[ry];",
            "    par[ry] = rx;",
            "    return;",
            "  }",
            "",
            "  bool same(int x, int y)",
            "  {",
            "    int rx = root(x);",
            "    int ry = root(y);",
            "    return rx == ry;",
            "  }",
            "",
            "  int size(int x) { return -par[root(x)]; }",
            "};"
        ],
        "description": "UnionFind"
    },
    "snp_print_maze": {
        "prefix": "print_maze",
        "body": [
            "auto print_maze = [](auto maze)",
            "{",
            "    int n = maze.size();",
            "    int m = maze[0].size();",
            "    rep(i, n)",
            "    {",
            "        rep(j, m) { cout << maze[i][j]; }",
            "        cout << endl;",
            "    }",
            "};"
        ],
        "description": "snp_print_maze"
    },
    "snp_include": {
        "prefix": "include",
        "body": [
            "#include <algorithm>",
            "#include <iostream>",
            "#include <iomanip>",
            "#include <limits.h>",
            "#include <map>",
            "#include <math.h>",
            "#include <numeric>",
            "#include <queue>",
            "#include <set>",
            "#include <sstream>",
            "#include <string>",
            "#include <utility>",
            "#include <vector>",
            "#include <stack>",
            "#include <complex>",
            "",
            "using namespace std;",
            "#define rep(i, n) for (int i = 0; i < n; i++)",
            "#define rep1(i, n) for (int i = 1; i < n + 1; i++)",
            "#define rev(i, n) for (int i = n - 1; i >= 0; i--)",
            "#define all(A) A.begin(), A.end()",
            "#define itr(A, l, r) A.begin() + l, A.begin() + r",
            "#define debug(var) cout << #var << \" = \" << var << endl;",
            "typedef long long ll;",
            "",
            "template <typename T1, typename T2>",
            "ostream &operator<<(ostream &os, const pair<T1, T2> &p)",
            "{",
            "    os << \"(\" << p.first << \",\" << p.second << \")\";",
            "    return os;",
            "}",
            "",
            "template <typename T1, typename T2>",
            "istream &operator>>(istream &is, pair<T1, T2> &p)",
            "{",
            "    is >> p.first >> p.second;",
            "    return is;",
            "}",
            "",
            "template <typename T>",
            "ostream &operator<<(ostream &os, const vector<T> &v)",
            "{",
            "    for (int i = 0; i < (int)v.size(); i++)",
            "    {",
            "        os << v[i] << (i + 1 != (int)v.size() ? \" \" : \"\");",
            "    }",
            "    return os;",
            "}",
            "",
            "template <typename T>",
            "ostream &operator<<(ostream &os, const vector<vector<T>> &v)",
            "{",
            "    for (int i = 0; i < (int)v.size(); i++)",
            "    {",
            "        os << v[i] << endl;",
            "    }",
            "    return os;",
            "}",
            "",
            "template <typename T>",
            "ostream &operator<<(ostream &os, const vector<vector<vector<T>>> &v)",
            "{",
            "    int n = v.size();",
            "    int m = v[0].size();",
            "    int p = v[0][0].size();",
            "    rep(k, p)",
            "    {",
            "        os << \"k = \" << k << endl;",
            "        rep(i, n)",
            "        {",
            "            rep(j, m)",
            "            {",
            "                os << v[i][j][k];",
            "                if (j < m - 1)",
            "                {",
            "                    os << \" \";",
            "                }",
            "                else",
            "                {",
            "                    os << endl;",
            "                }",
            "            }",
            "        }",
            "    }",
            "    return os;",
            "}",
            "",
            "template <typename T>",
            "istream &operator>>(istream &is, vector<T> &v)",
            "{",
            "    for (T &in : v)",
            "        is >> in;",
            "    return is;",
            "}",
            "",
            "template <typename T, typename S>",
            "ostream &operator<<(ostream &os, map<T, S> &mp)",
            "{",
            "    for (auto &[key, val] : mp)",
            "    {",
            "        os << key << \":\" << val << \" \";",
            "    }",
            "    cout << endl;",
            "    return os;",
            "}",
            "",
            "template <typename T>",
            "ostream &operator<<(ostream &os, set<T> st)",
            "{",
            "    auto itr = st.begin();",
            "    for (int i = 0; i < (int)st.size(); i++)",
            "    {",
            "        os << *itr << (i + 1 != (int)st.size() ? \" \" : \"\");",
            "        itr++;",
            "    }",
            "    return os;",
            "}",
            "",
            "template <typename T>",
            "ostream &operator<<(ostream &os, multiset<T> st)",
            "{",
            "    auto itr = st.begin();",
            "    for (int i = 0; i < (int)st.size(); i++)",
            "    {",
            "        os << *itr << (i + 1 != (int)st.size() ? \" \" : \"\");",
            "        itr++;",
            "    }",
            "    return os;",
            "}",
            "",
            "template <typename T>",
            "ostream &operator<<(ostream &os, queue<T> q)",
            "{",
            "    while (q.size())",
            "    {",
            "        os << q.front() << \" \";",
            "        q.pop();",
            "    }",
            "    return os;",
            "}",
            "",
            "template <typename T>",
            "ostream &operator<<(ostream &os, deque<T> q)",
            "{",
            "    while (q.size())",
            "    {",
            "        os << q.front() << \" \";",
            "        q.pop_front();",
            "    }",
            "    return os;",
            "}",
            "",
            "template <typename T>",
            "ostream &operator<<(ostream &os, stack<T> st)",
            "{",
            "    while (st.size())",
            "    {",
            "        os << st.top() << \" \";",
            "        st.pop();",
            "    }",
            "    return os;",
            "}",
            "",
            "template <typename T>",
            "ostream &operator<<(ostream &os, priority_queue<T> pq)",
            "{",
            "    while (pq.size())",
            "    {",
            "        os << pq.top() << \" \";",
            "        pq.pop();",
            "    }",
            "    return os;",
            "}",
            "",
            "template <typename T>",
            "ostream &operator<<(ostream &os, priority_queue<T, vector<T>, greater<T>> mpq)",
            "{",
            "    while (mpq.size())",
            "    {",
            "        os << mpq.top() << \" \";",
            "        mpq.pop();",
            "    }",
            "    return os;",
            "}",
            "",
            "int main()"
        ],
        "description": "snp_include"
    },
    "snp divisor": {
        "prefix": "divisor",
        "body": [
            "vector<ll> divisor(ll n)",
            "{",
            "  vector<ll> ans;",
            "  for (ll i = 1; i * i <= n; i++)",
            "  {",
            "    if (n % i == 0)",
            "    {",
            "      ans.push_back(i);",
            "      if (i * i != n)",
            "      {",
            "        ans.push_back(n / i);",
            "      }",
            "    }",
            "  }",
            "  sort(all(ans));",
            "  return ans;",
            "}"
        ],
        "description": "divisor"
    },
    "snp_gcd": {
        "prefix": "gcd",
        "body": [
            "ll gcd(ll a, ll b)",
            "{",
            "    if (b == 0)",
            "        return a;",
            "    return gcd(b, a % b);",
            "}",
            "",
            "ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }"
        ],
        "description": "snp_gcd"
    },
    "snp minpq": {
        "prefix": "minpq",
        "body": [
            "priority_queue<S,vector<S>, greater<S>>"
        ],
        "description": "minpq"
    },
    "snp_dijkstra": {
        "prefix": "dijkstra",
        "body": [
            "struct Edge {",
            "    long long to;",
            "    long long cost;",
            "};",
            "using Graph = vector<vector<Edge>>;",
            "using P = pair<long, int>;",
            "const long long INF = 1LL << 60;",
            "void dijkstra(const Graph &G, int s, vector<long long> &dis) {",
            "    int N = G.size();",
            "    dis.resize(N, INF);",
            "    priority_queue<P, vector<P>, greater<P>> pq;  // 「仮の最短距離, 頂点」が小さい順に並ぶ",
            "    dis[s] = 0;",
            "    pq.emplace(dis[s], s);",
            "    while (!pq.empty()) {",
            "        P p = pq.top();",
            "        pq.pop();",
            "        int v = p.second;",
            "        if (dis[v] < p.first) {  // 最短距離で無ければ無視",
            "            continue;",
            "        }",
            "        for (auto &e : G[v]) {",
            "            if (dis[e.to] > dis[v] + e.cost) {  // 最短距離候補なら priority_queue に追加",
            "                dis[e.to] = dis[v] + e.cost;",
            "                pq.emplace(dis[e.to], e.to);",
            "            }",
            "        }",
            "    }",
            "}"
        ],
        "description": "snp_dijkstra"
    },
    "snp_pint": {
        "prefix": "pint",
        "body": [
            "pair<int,int>"
        ],
        "description": "snp_pint"
    },
    "snp_chmin": {
        "prefix": "chmin",
        "body": [
            "auto chmin = [](auto &a, auto b)",
            "{ a = min(a, b); };"
        ],
        "description": "snp_chmin"
    },
    "snp_chmax": {
        "prefix": "chmax",
        "body": [
            "auto chmax = [](auto &a, auto b)",
            "{ a = max(a, b); };"
        ],
        "description": "snp_chmax"
    },
    "snp_zaz": {
        "prefix": "zaz",
        "body": [
            "auto zaz = [](auto a)",
            "{",
            "    auto b = a;",
            "    sort(all(b));",
            "    b.erase(unique(all(b)), b.end());",
            "    vector<int> ans;",
            "    for (auto i : a)",
            "    {",
            "        auto where = lower_bound(all(b), i);",
            "        ans.push_back(where - b.begin());",
            "    }",
            "    return ans;",
            "};"
        ],
        "description": "snp_zaz"
    },
    "snp_pll": {
        "prefix": "pll",
        "body": [
            "pair<ll,ll>"
        ],
        "description": "snp_pll"
    },
    "snp_modint": {
        "prefix": "modint",
        "body": [
            "#include <atcoder/modint>",
            "using namespace atcoder;",
            "",
            "ostream &operator<<(ostream &os, mint &i)",
            "{",
            "    os << i.val();",
            "    return os;",
            "}",
            "",
            "ostream &operator<<(ostream &os, const vector<mint> &v)",
            "{",
            "    for (int i = 0; i < (int)v.size(); i++)",
            "    {",
            "        os << v[i].val() << (i + 1 != (int)v.size() ? \" \" : \"\");",
            "    }",
            "    return os;",
            "}"
        ],
        "description": "snp_modint"
    },
    "snp_comb": {
        "prefix": "comb",
        "body": [
            "vector<mint> factor(1e6 + 1, 1);",
            "rep(i, 1e6)",
            "{",
            "    factor[i + 1] = factor[i] * (i + 1);",
            "}",
            "auto comb = [&](int n, int r)",
            "{",
            "    return factor[n] / factor[n - r] / factor[r];",
            "};",
            "auto H = [&](int n, int r)",
            "{",
            "    return comb(n + r - 1, r - 1);",
            "};"
        ],
        "description": "snp_comb"
    },
    "snp_dsu": {
        "prefix": "dsu",
        "body": [
            "#include <atcoder/dsu>",
            "using namespace atcoder;"
        ],
        "description": "snp_dsu"
    },
    "snp_vvv": {
        "prefix": "vvv",
        "body": [
            "using VI = vector<int>;",
            "using VVI = vector<VI>;",
            "using VVVI = vector<VVI>;",
            "using VVVVI = vector<VVVI>;",
            "using VVVVVI = vector<VVVVI>;"
        ],
        "description": "snp_vvv"
    },
    "snp_dxdy": {
        "prefix": "dxdy",
        "body": [
            "vector<int> dx = {1,-1,0,0};",
            "vector<int> dy = {0,0,1,-1};",
            "vector<pair<int, int>> dxy = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};"
        ],
        "description": "snp_dxdy"
    },
    "snp_geo": {
        "prefix": "geo",
        "body": [
            "struct Point",
            "{",
            "    double x = 0;",
            "    double y = 0;",
            "",
            "    void rot(double angle)",
            "    {",
            "        double new_x = x * cos(angle) - y * sin(angle);",
            "        double new_y = x * sin(angle) + y * cos(angle);",
            "        x = new_x;",
            "        y = new_y;",
            "    }",
            "",
            "    void rot(int degree)",
            "    {",
            "        double pi = atan(1) * 4;",
            "        double angle = double(degree) / 180 * pi;",
            "        rot(angle);",
            "    }",
            "",
            "    double norm()",
            "    {",
            "        return sqrt(x * x + y * y);",
            "    }",
            "",
            "    double arg()",
            "    {",
            "        return atan2(y, x);",
            "    }",
            "",
            "    double operator*(Point &other)",
            "    {",
            "        return x * other.x + y * other.y;",
            "    }",
            "",
            "    double operator^(Point &other)",
            "    {",
            "        return x * other.y - y * other.x;",
            "    }",
            "",
            "    Point operator+(Point &other)",
            "    {",
            "        Point ans;",
            "        ans.x = x + other.x;",
            "        ans.y = y + other.y;",
            "        return ans;",
            "    }",
            "",
            "    Point operator-(Point &other)",
            "    {",
            "        Point ans;",
            "        ans.x = x - other.x;",
            "        ans.y = y - other.y;",
            "        return ans;",
            "    }",
            "",
            "    int ccw(Point B, Point C)",
            "    {",
            "        Point A = *this;",
            "        Point AB = B - A;",
            "        Point AC = C - A;",
            "        double cross = AB ^ AC;",
            "        if (cross > 0)",
            "        {",
            "            return 1;",
            "        }",
            "        else if (cross == 0)",
            "        {",
            "            return 0;",
            "        }",
            "        else",
            "        {",
            "            return -1;",
            "        }",
            "        return true;",
            "    }",
            "};",
            "",
            "ostream &operator<<(ostream &os, Point p)",
            "{",
            "    os << \"(\" << p.x << \",\" << p.y << \")\";",
            "    return os;",
            "}",
            ""
        ],
        "description": "snp_geo"
    },
    "snp_intersect": {
        "prefix": "intersect",
        "body": [
            "auto intersect = [](int a, int b, int c, int d)",
            "{",
            "    if (b < c)",
            "    {",
            "        return false;",
            "    }",
            "    if (d < a)",
            "    {",
            "        return false;",
            "    }",
            "    return true;",
            "};"
        ],
        "description": "snp_intersect"
    },
    "snp_pf": {
        "prefix": "pf",
        "body": [
            "vector<pair<ll, ll>> prime_factorize(ll n)",
            "{",
            "    vector<pair<ll, ll>> ans;",
            "    for (ll i = 2; i * i <= n; i++)",
            "    {",
            "        if (n % i == 0)",
            "        {",
            "            ll ex = 0;",
            "            while (n % i == 0)",
            "            {",
            "                ex++;",
            "                n /= i;",
            "            }",
            "            ans.push_back({i, ex});",
            "        }",
            "    }",
            "    if (n != 1)",
            "    {",
            "        ans.push_back({n, 1});",
            "    }",
            "    return ans;",
            "}"
        ],
        "description": "snp_pf"
    },
    "snp_paiset": {
        "prefix": "pairset",
        "body": [
            "struct pairset",
            "{",
            "    std::set<std::pair<int, int>> data;",
            "    std::map<int, int> count;",
            "    int size;",
            "",
            "    pairset()",
            "    {",
            "        data.insert({INT_MIN, INT_MIN});",
            "        data.insert({INT_MAX, INT_MAX});",
            "        size = 0;",
            "    }",
            "",
            "    bool contains(int x)",
            "    {",
            "        auto itr = prev(data.lower_bound({x + 1, x + 1}));",
            "        auto [L, R] = *itr;",
            "        return L <= x && x <= R;",
            "    }",
            "",
            "    bool insert(int x)",
            "    {",
            "        count[x]++;",
            "        auto next_itr = data.lower_bound({x + 1, x + 1});",
            "        auto itr = prev(next_itr);",
            "        auto [L, R] = *itr;",
            "        auto [next_L, next_R] = *next_itr;",
            "        if (L <= x && x <= R)",
            "        {",
            "            size++;",
            "            return false;",
            "        }",
            "        if (R == x - 1)",
            "        {",
            "            if (next_L == x + 1)",
            "            {",
            "                data.erase(itr);",
            "                data.erase(next_itr);",
            "                data.insert({L, next_R});",
            "            }",
            "            else",
            "            {",
            "                data.erase(itr);",
            "                data.insert({L, x});",
            "            }",
            "        }",
            "        else",
            "        {",
            "            if (next_L == x + 1)",
            "            {",
            "                data.erase(next_itr);",
            "                data.insert({x, next_R});",
            "            }",
            "            else",
            "            {",
            "                data.insert({x, x});",
            "            }",
            "        }",
            "        size++;",
            "        return true;",
            "    }",
            "",
            "    bool remove(int x)",
            "    {",
            "        if (count[x] == 0)",
            "        {",
            "            return false;",
            "        }",
            "        count[x]--;",
            "        if (count[x])",
            "        {",
            "            size--;",
            "            return false;",
            "        }",
            "        auto next_itr = data.lower_bound({x + 1, x + 1});",
            "        auto itr = prev(next_itr);",
            "        auto [L, R] = *itr;",
            "        auto [next_L, next_R] = *next_itr;",
            "        if (x < L || R < x)",
            "        {",
            "            return false;",
            "        }",
            "        if (L == R)",
            "        {",
            "            data.erase(itr);",
            "        }",
            "        else if (x == L)",
            "        {",
            "            data.erase(itr);",
            "            data.insert({x + 1, R});",
            "        }",
            "        else if (x == R)",
            "        {",
            "            data.erase(itr);",
            "            data.insert({L, x - 1});",
            "        }",
            "        else",
            "        {",
            "            data.erase(itr);",
            "            data.insert({L, x - 1});",
            "            data.insert({x + 1, R});",
            "        }",
            "        size--;",
            "        return true;",
            "    }",
            "",
            "    int mex(int x = 0)",
            "    {",
            "        auto [L, R] = *prev(data.lower_bound({x + 1, x + 1}));",
            "        if (L <= x && x <= R)",
            "        {",
            "            return R + 1;",
            "        }",
            "        else",
            "        {",
            "            return x;",
            "        }",
            "    }",
            "",
            "    int min()",
            "    {",
            "        auto itr = *data.lower_bound({INT_MIN + 1, INT_MIN + 1});",
            "        return itr.first;",
            "    }",
            "",
            "    int max()",
            "    {",
            "        auto itr = *prev(data.lower_bound({INT_MAX, INT_MAX}));",
            "        return itr.second;",
            "    }",
            "};"
        ],
        "description": "snp_paiset"
    }
}