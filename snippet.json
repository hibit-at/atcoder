{
    "snp chmax": {
        "prefix": "chmax",
        "body": [
            "template <typename T>",
            "void chmax(T &a, T b) { a = max(a, b); }"
        ],
        "description": "chmax"
    },
    "snp chmin": {
        "prefix": "chmin",
        "body": [
            "template <typename T>",
            "void chmin(T &a, T b) { a = min(a, b); }"
        ],
        "description": "chmin"
    },
    "snp print_vector": {
        "prefix": "print_vector",
        "body": [
            "template <typename T>",
            "void print_vector(vector<T> v)",
            "{",
            "for (T i : v)",
            "  {",
            "    cout << i << ',';",
            "  }",
            "  cout << endl;",
            "  return;",
            "}"
        ],
        "description": "print_vector"
    },
    "snp print_vector_vector": {
        "prefix": "print_vector_vector",
        "body": [
            "template <typename T>",
            "void print_vector_vector(vector<vector<T>> vv)",
            "{",
            "  for (vector<T> v : vv)",
            "  {",
            "    for (int i : v)",
            "    {",
            "      cout << i << \",\";",
            "    }",
            "    cout << endl;",
            "  }",
            "}"
        ],
        "description": "print_vector_vector"
    },
    "snp UnionFind": {
        "prefix": "UnionFind",
        "body": [
            "struct UnionFind",
            "{",
            "  vector<int> par;",
            "",
            "  UnionFind(int N) : par(N)",
            "  {",
            "    for (int i = 0; i < N; i++)",
            "      par[i] = -1;",
            "  }",
            "",
            "  int root(int x)",
            "  {",
            "    if (par[x] < 0)",
            "      return x;",
            "    return par[x] = root(par[x]);",
            "  }",
            "",
            "  void unite(int x, int y)",
            "  {",
            "    int rx = root(x);",
            "    int ry = root(y);",
            "    if (same(x, y))",
            "    {",
            "      return;",
            "    }",
            "    if (par[rx] > par[ry])",
            "      swap(rx, ry);",
            "    par[rx] += par[ry];",
            "    par[ry] = rx;",
            "    return;",
            "  }",
            "",
            "  bool same(int x, int y)",
            "  {",
            "    int rx = root(x);",
            "    int ry = root(y);",
            "    return rx == ry;",
            "  }",
            "",
            "  int size(int x) { return -par[root(x)]; }",
            "};"
        ],
        "description": "UnionFind"
    },
    "snp top_sort": {
        "prefix": "top_sort",
        "body": [
            "bool top_sort(int n, vector<vector<int>> to)",
            "{",
            "  vector<int> graph(n + 1);",
            "  rep1(i, n)",
            "  {",
            "    for (int next : to[i])",
            "    {",
            "      graph[next]++;",
            "    }",
            "  }",
            "  stack<int> st;",
            "  rep1(i, n)",
            "  {",
            "    if (graph[i] == 0)",
            "    {",
            "      st.push(i);",
            "    }",
            "  }",
            "  while (st.size() > 0)",
            "  {",
            "    int now = st.top();",
            "    st.pop();",
            "    for (int next : to[now])",
            "    {",
            "      graph[next]--;",
            "      if (graph[next] == 0)",
            "      {",
            "        st.push(next);",
            "      }",
            "    }",
            "  }",
            "  rep1(i, n)",
            "  {",
            "    if (graph[i] > 0)",
            "    {",
            "      return false;",
            "    }",
            "  }",
            "  return true;",
            "}"
        ],
        "description": "top_sort"
    },
    "snp print_to": {
        "prefix": "print_to",
        "body": [
            "template <typename T>",
            "void print_to(vector<vector<T>> to)",
            "{",
            "  int n = to.size();",
            "  rep(i, n)",
            "  {",
            "    cout << \"from \" << i << \" : to \";",
            "    for (int next : to[i])",
            "    {",
            "      cout << next << \",\";",
            "    }",
            "    cout << endl;",
            "  }",
            "}"
        ],
        "description": "print_to"
    },
    "print_maze": {
        "prefix": "print_maze",
        "body": [
            "void print_maze(vector<vector<char>> maze)",
            "{",
            "  int n = maze.size();",
            "  int m = maze[0].size();",
            "  rep(i, n)",
            "  {",
            "    rep(j, m) { cout << maze[i][j]; }",
            "    cout << endl;",
            "  }",
            "}"
        ],
        "description": "print_maze"
    },
    "snp include": {
        "prefix": "include",
        "body": [
            "#include <algorithm>",
            "#include <iostream>",
            "#include <iomanip>",
            "#include <limits.h>",
            "#include <map>",
            "#include <math.h>",
            "#include <numeric>",
            "#include <queue>",
            "#include <set>",
            "#include <sstream>",
            "#include <string>",
            "#include <utility>",
            "#include <vector>",
            "#include <stack>",
            "",
            "using namespace std;",
            "#define rep(i, n) for (int i = 0; i < n; i++)",
            "#define rep1(i, n) for (int i = 1; i < n + 1; i++)",
            "#define all(A) A.begin(), A.end()",
            "#define itr(A, l, r) A.begin() + l, A.begin() + r",
            "#define debug(var) cout << #var << \" = \" << var << endl;",
            "typedef long long ll;",
            "",
            "int main(void)"
        ],
        "description": "include"
    },
    "snp divisor": {
        "prefix": "divisor",
        "body": [
            "vector<ll> divisor(ll n)",
            "{",
            "  vector<ll> ans;",
            "  for (ll i = 1; i * i <= n; i++)",
            "  {",
            "    if (n % i == 0)",
            "    {",
            "      ans.push_back(i);",
            "      if (i * i != n)",
            "      {",
            "        ans.push_back(n / i);",
            "      }",
            "    }",
            "  }",
            "  sort(all(ans));",
            "  return ans;",
            "}"
        ],
        "description": "divisor"
    },
    "snp yesno": {
        "prefix": "yesno",
        "body": [
            "void yesno(bool b)",
            "{",
            "  if (b)",
            "  {",
            "    cout << \"Yes\" << endl;",
            "  }",
            "  else",
            "  {",
            "    cout << \"No\" << endl;",
            "  }",
            "}",
            ""
        ],
        "description": "yesno"
    },
    "snp print_front": {
        "prefix": "print_front",
        "body": [
            "template <typename T>",
            "void print_front(T q)",
            "{",
            "  while (q.size() > 0)",
            "  {",
            "    int now = q.front();",
            "    q.pop();",
            "    cout << now << \" \";",
            "  }",
            "  cout << endl;",
            "}",
            ""
        ],
        "description": "print_front"
    },
    "snp minpq": {
        "prefix": "minpq",
        "body": [
            "priority_queue<int,vector<int>, greater<int>>"
        ],
        "description": "minpq"
    },
    "snp gcd": {
        "prefix": "gcd",
        "body": [
            "template <typename T>",
            "T gcd(T a, T b)",
            "{",
            "  if (b == 0)",
            "    return a;",
            "  return gcd(b, a % b);",
            "}"
        ],
        "description": "gcd"
    },
    "snp chminqueue": {
        "prefix": "chminqueue",
        "body": [
            "void chminque(int now, int next, int cost, vector<int> &dist, queue<int> &q)",
            "{",
            "    if (dist[now] + cost < dist[next])",
            "    {",
            "        dist[next] = dist[now] + 1;",
            "        q.push(next);",
            "    }",
            "    return;",
            "}"
        ],
        "description": "chminqueue"
    }
}